{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;AACb,QAAO,kBAAkB,CAAC,CAAA;AAI1B,MAAY,UAAU,WAAM,cAAc,CAAC,CAAA;AAC3C,iBAAc,cAAc,CAAC,EAAA;AAC7B,MAAO,SAAS,WAAW,WAAW,CAAC,CAAC;AAExC;IAAA;QAEU,WAAM,GAAsB,EAAE,CAAC;QAC/B,eAAU,GAAY,KAAK,CAAC;IAsrBtC,CAAC;IA9qBQ,QAAQ,CAAC,MAAc,EAAE,gBAAoC;QAElE,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAEpE,GAAG,CAAC,CAAC,IAAI,aAAa,IAAI,QAAQ,CAAC,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,UAAU,CAAC,cAAc,CAAC,MAAM;mBACtD,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,gBAAgB,CAAC,CAAC;YAClE,CAAC;YACD,IAAI,CAAC,CAAC;gBAEJ,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBAExB,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;uBACvD,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;oBAE3D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,OAAO;wBACvC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,kBAAkB;wBACrG,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;uBAC9D,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,EAAE;2BACpC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI;2BACvC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC;oBAErD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,SAAS;wBACzC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,YAAY;wBAC/F,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,WAAW;uBACzD,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;oBAE7C,IAAI,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;oBAE/E,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;oBAC3C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;oBAG3C,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;wBAE3B,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BAErC,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC;gCACjC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oCAGnB,KAAK,QAAQ;wCACX,EAAE,CAAC,CAAC,aAAa,CAAC,KAAK;+CAClB,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;4CAE7C,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,aAAa,CAAC,KAAK;mDAC9D,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,KAAK,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gDAElG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oDACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oDAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oDAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oDACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,kBAAkB,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG;oDACtI,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iDACtC,CAAC,CAAC;4CACL,CAAC;wCACH,CAAC;wCACD,KAAK,CAAC;oCAGR,KAAK,QAAQ;wCACX,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;4CAE5C,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK;mDACnB,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,aAAa,CAAC,KAAK,CAAC,CAAC;mDACjE,CAAC,CAAC,aAAa,CAAC,KAAK;uDACnB,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gDAE7D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oDACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oDAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oDAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oDACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,mBAAmB;oDACtG,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iDACtC,CAAC,CAAC;4CACL,CAAC;wCACH,CAAC;wCACD,KAAK,CAAC;oCAGR,KAAK,QAAQ;wCACX,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;4CAE5C,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK;mDACnB,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,aAAa,CAAC,KAAK,CAAC,CAAC;mDACjE,CAAC,CAAC,aAAa,CAAC,KAAK;uDACnB,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gDAE7D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oDACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oDAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oDAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oDACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,mBAAmB;oDACtG,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iDACtC,CAAC,CAAC;4CACL,CAAC;wCACH,CAAC;wCACD,KAAK,CAAC;oCAGR,KAAK,SAAS;wCACZ,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;4CAE5C,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK;mDACnB,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,aAAa,CAAC,KAAK,CAAC,CAAC;mDACjE,CAAC,CAAC,aAAa,CAAC,KAAK;uDACnB,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gDAE9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oDACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oDAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oDAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oDACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,0BAA0B;oDAC7G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iDACtC,CAAC,CAAC;4CACL,CAAC;wCACH,CAAC;wCACD,KAAK,CAAC;oCAGR;wCACE,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;4CAEnC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK;mDACnB,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,aAAa,CAAC,KAAK,CAAC,CAAC;mDACjE,CAAC,CAAC,aAAa,CAAC,KAAK;uDACnB,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gDAE3D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oDACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oDAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oDAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oDACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,kBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,GAAG;oDACxH,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iDACtC,CAAC,CAAC;4CACL,CAAC;wCACH,CAAC;wCACD,KAAK,CAAC;gCACV,CAAC;4BACH,CAAC;4BACD,IAAI,CAAC,CAAC;gCAGJ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oCACxC,OAAO,EAAE,4CAA4C,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,GAAG;oCACvH,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iCACtC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBAER,KAAK,UAAU,CAAC,cAAc,CAAC,MAAM;4BACnC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;mCAC1D,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,MAAM;oCACtC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,0BAA0B;oCAC7G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iCACtC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BACrC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;mCAC5D,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oCACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,wBAAwB;oCAC3G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iCACtC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,UAAU;4BACvC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;mCAC9D,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,UAAU;oCAC1C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,0BAA0B;oCAC7G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iCACtC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BACrC,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,EAAE;mCACpC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI;mCACvC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gCAElD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oCACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,gBAAgB;oCACnG,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;iCACtC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BACrC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAEpF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oCACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,+BAA+B;oCAClH,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;oCACrC,UAAU,EAAE,aAAa,CAAC,KAAK;iCAChC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,YAAY;4BACzC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAEnF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,YAAY;oCAC5C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,uCAAuC;oCAC1H,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;oCACrC,UAAU,EAAE,aAAa,CAAC,KAAK;iCAChC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,MAAM;4BACnC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;gCAEjG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,MAAM;oCACxE,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,gBAAgB,GAAG,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,GAAG;oCAC1I,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;oCACrC,UAAU,EAAE,aAAa,CAAC,KAAK;iCAChC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;4BACpC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ;mCACjD,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,kBAAkB,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC7I,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;gCAEtG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,OAAO;oCACvC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,kBAAkB,GAAG,aAAa,CAAC,KAAK,GAAG,YAAY;oCAC1I,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;oCACrC,UAAU,EAAE,aAAa,CAAC,KAAK;iCAChC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;4BACpC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ;mCACjD,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,kBAAkB,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC7I,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;gCAEtG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,OAAO;oCACvC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,mBAAmB,GAAG,aAAa,CAAC,KAAK,GAAG,YAAY;oCAC3I,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;oCACrC,UAAU,EAAE,aAAa,CAAC,KAAK;iCAChC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BACrC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ;mCACjD,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,kBAAkB,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC7I,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAE7F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;oCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;oCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;oCACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oBAAoB,GAAG,aAAa,CAAC,KAAK,GAAG,GAAG;oCACnI,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;oCACrC,UAAU,EAAE,aAAa,CAAC,KAAK;iCAChC,CAAC,CAAC;4BACL,CAAC;4BACD,KAAK,CAAC;oBACV,CAAC;gBACH,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,QAAQ,CAAC;gBACX,CAAC;YACH,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAQS,cAAc,CAAC,MAAc,EAAE,aAAkB;QACzD,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAE3B,KAAK,UAAU,CAAC,cAAc,CAAC,YAAY;gBACzC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBAE/F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,YAAY;wBAC5C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,kBAAkB,GAAG,aAAa,CAAC,KAAK,GAAG,WAAW;wBACzI,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBACrC,UAAU,EAAE,aAAa,CAAC,KAAK;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,YAAY;gBACzC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC/F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,YAAY;wBAC5C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,mBAAmB,GAAG,aAAa,CAAC,KAAK,GAAG,WAAW;wBAC1I,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBACrC,UAAU,EAAE,aAAa,CAAC,KAAK;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,KAAK;gBAClC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBAE1F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,KAAK;wBACrC,OAAO,EAAE,WAAW;4BACpB,aAAa,CAAC,QAAQ,GAAG,MAAM;4BAC/B,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oDAAoD;wBAC9E,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEjG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,SAAS;wBACzC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,uBAAuB;wBAC1G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,IAAI;gBACjC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAE3D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,IAAI;wBACpC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,iBAAiB;wBACpG,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,YAAY;gBACzC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAE9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,YAAY;wBAC5C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,iCAAiC;wBACpH,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,UAAU;gBACvC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAEjF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,UAAU;wBAC1C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,uBAAuB,GAAG,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG;wBACxJ,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBACrC,UAAU,EAAE,aAAa,CAAC,KAAK;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,WAAW;gBACxC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAElF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,WAAW,EAAE,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,wBAAwB,GAAG,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG;wBACtM,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBACrC,UAAU,EAAE,aAAa,CAAC,KAAK;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEhE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,SAAS;wBACzC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oBAAoB;wBACvG,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEhE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,SAAS;wBACzC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oBAAoB;wBACvG,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,WAAW;gBACxC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAElE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,WAAW;wBAC3C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,4BAA4B;wBAC/G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBACrC,UAAU,EAAE,aAAa,CAAC,KAAK;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,KAAK;gBAClC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAE5D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,KAAK;wBACrC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,6BAA6B;wBAChH,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAE/D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,SAAS;wBACzC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,2BAA2B;wBAC9G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,WAAW;gBACxC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEjE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,WAAW;wBAC3C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,qBAAqB;wBACxG,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;gBACrC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ;uBACpD,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,kBAAkB,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7I,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;uBAC1D,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAEtD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ;wBACxC,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,0BAA0B;wBAC7G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,UAAU;gBACvC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,EAAE,CAAC,CAAC,aAAa,CAAC,KAAK,KAAK,IAAI;2BAC3B,aAAa,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;wBAEvC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;+BACjD,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;4BAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;gCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;gCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,UAAU;gCAC1C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,0BAA0B;gCAC7G,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;6BACtC,CAAC,CAAC;wBACL,CAAC;oBACH,CAAC;oBACD,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,KAAK,KAAK,CAAC;2BAC7B,aAAa,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;wBAE/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;4BACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;4BAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;4BAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,UAAU;4BAC1C,OAAO,EAAE,8BAA8B,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,GAAG,aAAa,CAAC,KAAK,GAAG,yCAAyC;4BAC5K,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;4BACrC,UAAU,EAAE,aAAa,CAAC,KAAK;yBAChC,CAAC,CAAC;oBACL,CAAC;oBACD,IAAI,CAAC,CAAC;wBACJ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BAEzE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gCACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;gCAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;gCAChC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,UAAU;gCAC1C,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,iBAAiB,GAAG,aAAa,CAAC,KAAK,GAAG,WAAW;gCACxI,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;gCACrC,UAAU,EAAE,aAAa,CAAC,KAAK;6BAChC,CAAC,CAAC;wBACL,CAAC;oBACH,CAAC;gBACH,CAAC;gBACD,KAAK,CAAC;QACV,CAAC;IACH,CAAC;IAQS,cAAc,CAAC,MAAc,EAAE,aAAkB;QACzD,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAE3B,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBAErG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,aAAa,CAAC,IAAI;wBACxB,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,kBAAkB,GAAG,aAAa,CAAC,KAAK,GAAG,GAAG;wBACjI,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBACrC,UAAU,EAAE,aAAa,CAAC,KAAK;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBAErG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,aAAa,CAAC,IAAI;wBACxB,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,mBAAmB,GAAG,aAAa,CAAC,KAAK,GAAG,GAAG;wBAClI,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBACrC,UAAU,EAAE,aAAa,CAAC,KAAK;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,WAAW;gBACxC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAElG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;wBACf,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;wBAC/B,QAAQ,EAAE,aAAa,CAAC,QAAQ;wBAChC,IAAI,EAAE,aAAa,CAAC,IAAI;wBACxB,OAAO,EAAE,WAAW,GAAG,aAAa,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,qBAAqB,GAAG,aAAa,CAAC,KAAK,GAAG,GAAG;wBACpI,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBACrC,UAAU,EAAE,aAAa,CAAC,KAAK;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;QACV,CAAC;IACH,CAAC;IAES,sBAAsB,CAAC,MAAW,EAAE,QAAgB,EAAE,IAAY,EAAE,QAAgB,EAAE,UAAgB;QAC9G,MAAM,CAAC;YACL,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI;YAC/B,QAAQ,EAAE,QAAQ;YAClB,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,WAAW,GAAG,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,kBAAkB,GAAG,QAAQ,GAAG,GAAG;YACxG,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC;YACvB,UAAU,EAAE,UAAU;SACvB,CAAC;IACJ,CAAC;AAEH,CAAC;AAzrBY,iBAAS,YAyrBrB,CAAA","file":"index.js","sourcesContent":["'use strict';\r\nimport 'reflect-metadata';\r\nimport { IValidatorOptions } from './interfaces/IValidatorOptions';\r\nimport { IValidatorError } from './interfaces/IValidatorError';\r\nexport * from './interfaces/IValidatorError';\r\nimport * as decorators from './decorators';\r\nexport * from './decorators';\r\nimport validator = require('validator');\r\n\r\nexport class Validator {\r\n\r\n  private errors: IValidatorError[] = [];\r\n  private nestedMode: boolean = false;\r\n\r\n  /**\r\n   * Validate via decorator predefined metadata of properties of objects and nested objects. Returns error messages via array of the IValidatorError interface.\r\n   * @param target Object\r\n   * @param validatorOptions IValidatorOptions optional\r\n   * @return IValidatorError[]\r\n   */\r\n  public validate(target: Object, validatorOptions?: IValidatorOptions): IValidatorError[] {\r\n\r\n    let metadata = Reflect.getMetadata('tsvalidate:validators', target);\r\n    // Loop over sets of Metadata, execute requested validation.\r\n    for (let metadataEntry of metadata) {\r\n      if (metadataEntry.type === decorators.DecoratorTypes.NESTED\r\n        && typeof target[metadataEntry.property] === 'object') {\r\n        this.nestedMode = true;\r\n        this.validate(target[metadataEntry.property], validatorOptions);\r\n      }\r\n      else {\r\n\r\n        this.nestedMode = false;\r\n        // Get system- and validator-predefined Metadata, then check for sufficient results.\r\n        if (metadataEntry.type === decorators.DecoratorTypes.DEFINED\r\n          && typeof target[metadataEntry.property] === 'undefined') {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.DEFINED,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not defined.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        else if (metadataEntry.type === decorators.DecoratorTypes.NOT_EMPTY\r\n          && (target[metadataEntry.property] === ''\r\n            || target[metadataEntry.property] === null\r\n            || target[metadataEntry.property] === undefined)) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.NOT_EMPTY,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is empty.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        else if (typeof target[metadataEntry.property] !== 'undefined'\r\n          && target[metadataEntry.property] !== null) {\r\n\r\n          let types = Reflect.getMetadata('design:type', target, metadataEntry.property);\r\n          // Execute requested type dependant validation.\r\n          this.validateString(target, metadataEntry);\r\n          this.validateNumber(target, metadataEntry);\r\n\r\n          // Execute requested type independant validation.\r\n          switch (metadataEntry.type) {\r\n\r\n            case decorators.DecoratorTypes.IS_TYPED:\r\n\r\n              if (typeof types !== 'undefined') {\r\n                switch (types.name) {\r\n\r\n                  // declared type: any\r\n                  case 'Object':\r\n                    if (metadataEntry.value\r\n                      && target[metadataEntry.property] !== null) {\r\n\r\n                      if (!(target[metadataEntry.property] instanceof metadataEntry.value\r\n                        || metadataEntry.value.name.toString().toLowerCase() === typeof target[metadataEntry.property])) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: metadataEntry.property,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not of type ' + metadataEntry.value.name + '.',\r\n                          value: target[metadataEntry.property]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n\r\n                  // declared type: string\r\n                  case 'String':\r\n                    if (target[metadataEntry.property] !== null) {\r\n\r\n                      if ((metadataEntry.value\r\n                        && !(target[metadataEntry.property] instanceof metadataEntry.value))\r\n                        || (!metadataEntry.value\r\n                          && (typeof target[metadataEntry.property] !== 'string'))) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: metadataEntry.property,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not a string.',\r\n                          value: target[metadataEntry.property]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n\r\n                  // declared type: number\r\n                  case 'Number':\r\n                    if (target[metadataEntry.property] !== null) {\r\n\r\n                      if ((metadataEntry.value\r\n                        && !(target[metadataEntry.property] instanceof metadataEntry.value))\r\n                        || (!metadataEntry.value\r\n                          && (typeof target[metadataEntry.property] !== 'number'))) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: metadataEntry.property,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not a number.',\r\n                          value: target[metadataEntry.property]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n\r\n                  // declared type: boolean\r\n                  case 'Boolean':\r\n                    if (target[metadataEntry.property] !== null) {\r\n\r\n                      if ((metadataEntry.value\r\n                        && !(target[metadataEntry.property] instanceof metadataEntry.value))\r\n                        || (!metadataEntry.value\r\n                          && (typeof target[metadataEntry.property] !== 'boolean'))) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: metadataEntry.property,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not of type Boolean.',\r\n                          value: target[metadataEntry.property]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n\r\n                  // declared type: object\r\n                  default:\r\n                    if (target[metadataEntry.property]) {\r\n\r\n                      if ((metadataEntry.value\r\n                        && !(target[metadataEntry.property] instanceof metadataEntry.value))\r\n                        || (!metadataEntry.value\r\n                          && !(target[metadataEntry.property] instanceof types))) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: metadataEntry.property,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not of type ' + types.name + '.',\r\n                          value: target[metadataEntry.property]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n                }\r\n              }\r\n              else {\r\n\r\n                // limit to once per property(!?)\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.IS_TYPED,\r\n                  message: 'Can not get type information for property ' + metadataEntry.property + ' of ' + target.constructor.name + '.',\r\n                  value: target[metadataEntry.property]\r\n                });\r\n              }\r\n              break;\r\n\r\n            case decorators.DecoratorTypes.IS_INT:\r\n              if (!validator.isInt(target[metadataEntry.property].toString())\r\n                || typeof target[metadataEntry.property] !== 'number') {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.IS_INT,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not of type Integer.',\r\n                  value: target[metadataEntry.property]\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.IS_FLOAT:\r\n              if (!validator.isFloat(target[metadataEntry.property].toString())\r\n                || typeof target[metadataEntry.property] !== 'number') {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.IS_FLOAT,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not of type Float.',\r\n                  value: target[metadataEntry.property]\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.IS_DECIMAL:\r\n              if (!validator.isDecimal(target[metadataEntry.property].toString())\r\n                || typeof target[metadataEntry.property] !== 'number') {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.IS_DECIMAL,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not of type Decimal.',\r\n                  value: target[metadataEntry.property]\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.IS_EMPTY:\r\n              if (target[metadataEntry.property] !== ''\r\n                && target[metadataEntry.property] !== null\r\n                && target[metadataEntry.property] !== undefined) {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.IS_EMPTY,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not empty.',\r\n                  value: target[metadataEntry.property]\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.IN_ARRAY:\r\n              if (!validator.isIn(target[metadataEntry.property].toString(), metadataEntry.value)) {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.IN_ARRAY,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' not found in relevant array.',\r\n                  value: target[metadataEntry.property],\r\n                  comparison: metadataEntry.value\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.NOT_IN_ARRAY:\r\n              if (validator.isIn(target[metadataEntry.property].toString(), metadataEntry.value)) {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.NOT_IN_ARRAY,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' found in array of disallowed values.',\r\n                  value: target[metadataEntry.property],\r\n                  comparison: metadataEntry.value\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.EQUALS:\r\n              if (!validator.equals(target[metadataEntry.property].toString(), metadataEntry.value.toString())) {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property, type: decorators.DecoratorTypes.EQUALS,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' not equal to ' + metadataEntry.value.toString() + '.',\r\n                  value: target[metadataEntry.property],\r\n                  comparison: metadataEntry.value\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.MAX_LEN:\r\n              if (typeof target[metadataEntry.property] !== 'string'\r\n                && typeof target[metadataEntry.property] !== 'number') {\r\n                this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'Number or String', metadataEntry.value));\r\n              }\r\n              else if (!validator.isLength(target[metadataEntry.property].toString(), { max: metadataEntry.value })) {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.MAX_LEN,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is longer than ' + metadataEntry.value + ' digit(s).',\r\n                  value: target[metadataEntry.property],\r\n                  comparison: metadataEntry.value\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.MIN_LEN:\r\n              if (typeof target[metadataEntry.property] !== 'string'\r\n                && typeof target[metadataEntry.property] !== 'number') {\r\n                this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'Number or String', metadataEntry.value));\r\n              }\r\n              else if (!validator.isLength(target[metadataEntry.property].toString(), { min: metadataEntry.value })) {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.MIN_LEN,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is shorter than ' + metadataEntry.value + ' digit(s).',\r\n                  value: target[metadataEntry.property],\r\n                  comparison: metadataEntry.value\r\n                });\r\n              }\r\n              break;\r\n            case decorators.DecoratorTypes.CONTAINS:\r\n              if (typeof target[metadataEntry.property] !== 'string'\r\n                && typeof target[metadataEntry.property] !== 'number') {\r\n                this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'Number or String', metadataEntry.value));\r\n              }\r\n              else if (!validator.contains(target[metadataEntry.property].toString(), metadataEntry.value)) {\r\n\r\n                this.errors.push({\r\n                  target: target.constructor.name,\r\n                  property: metadataEntry.property,\r\n                  type: decorators.DecoratorTypes.CONTAINS,\r\n                  message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' does not contain ' + metadataEntry.value + '.',\r\n                  value: target[metadataEntry.property],\r\n                  comparison: metadataEntry.value\r\n                });\r\n              }\r\n              break;\r\n          }\r\n        }\r\n        else {\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n    if (!this.nestedMode) {\r\n      return this.errors;\r\n    }\r\n    else {\r\n      return [];\r\n    }\r\n  } // method end (validate)\r\n\r\n  /**\r\n   * Validates metadata of properties of type string.\r\n   * @param target Object\r\n   * @param metadataEntry.property string\r\n   * @param metadataEntry any\r\n   */\r\n  protected validateString(target: Object, metadataEntry: any) {\r\n    switch (metadataEntry.type) {\r\n\r\n      case decorators.DecoratorTypes.MAX_BYTE_LEN:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isByteLength(target[metadataEntry.property], { max: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.MAX_BYTE_LEN,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is longer than ' + metadataEntry.value + ' byte(s).',\r\n            value: target[metadataEntry.property],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MIN_BYTE_LEN:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isByteLength(target[metadataEntry.property], { min: metadataEntry.value })) {\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.MIN_BYTE_LEN,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is shorter than ' + metadataEntry.value + ' byte(s).',\r\n            value: target[metadataEntry.property],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.ALPHA:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isAlpha(target[metadataEntry.property].toString().replace(/\\s/g, ''))) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.ALPHA,\r\n            message: 'Property ' +\r\n            metadataEntry.property + ' of ' +\r\n            target.constructor.name + ' is not exclusively composed of letter characters.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.ALPHA_NUM:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isAlphanumeric(target[metadataEntry.property].toString().replace(/\\s/g, ''))) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.ALPHA_NUM,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not alphanumeric.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.DATE:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isDate(target[metadataEntry.property])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.DATE,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not a date.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.DATE_ISO8601:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isISO8601(target[metadataEntry.property])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.DATE_ISO8601,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not a ISO8601 conform date.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.DATE_AFTER:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isAfter(target[metadataEntry.property], metadataEntry.value)) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.DATE_AFTER,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not a date after ' + validator.toDate(metadataEntry.value) + '.',\r\n            value: target[metadataEntry.property],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.DATE_BEFORE:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isBefore(target[metadataEntry.property], metadataEntry.value)) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.DATE_BEFORE, message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not a date before ' + validator.toDate(metadataEntry.value) + '.',\r\n            value: target[metadataEntry.property],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.UPPERCASE:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isUppercase(target[metadataEntry.property])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.UPPERCASE,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not uppercase.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.LOWERCASE:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isLowercase(target[metadataEntry.property])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.LOWERCASE,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is not lowercase.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.HEXADECIMAL:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isHexadecimal(target[metadataEntry.property])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.HEXADECIMAL,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is no hexadecimal number.',\r\n            value: target[metadataEntry.property],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.EMAIL:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isEmail(target[metadataEntry.property])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.EMAIL,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is no valid email address.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.HEX_COLOR:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isHexColor(target[metadataEntry.property])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.HEX_COLOR,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is no hexadecimal color.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MAC_ADDRESS:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else if (!validator.isMACAddress(target[metadataEntry.property])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.MAC_ADDRESS,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is no MAC address.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MONGO_ID:\r\n        if (typeof target[metadataEntry.property] !== 'string'\r\n       && typeof target[metadataEntry.property] !== 'number') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String or Number', metadataEntry.value));\r\n        }\r\n        else if (!validator.isMongoId(target[metadataEntry.property])\r\n        && typeof target[metadataEntry.property] !== 'number') {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: decorators.DecoratorTypes.MONGO_ID,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is no MongoDB ObjectID.',\r\n            value: target[metadataEntry.property]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.IP_ADDRESS:\r\n        if (typeof target[metadataEntry.property] !== 'string') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'String', metadataEntry.value));\r\n        }\r\n        else {\r\n          if (metadataEntry.value === null\r\n            || metadataEntry.value === undefined) {\r\n\r\n            if (!validator.isIP(target[metadataEntry.property], 4)\r\n              && !validator.isIP(target[metadataEntry.property], 6)) {\r\n\r\n              this.errors.push({\r\n                target: target.constructor.name,\r\n                property: metadataEntry.property,\r\n                type: decorators.DecoratorTypes.IP_ADDRESS,\r\n                message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is no valid IP address.',\r\n                value: target[metadataEntry.property]\r\n              });\r\n            }\r\n          }\r\n          else if (metadataEntry.value !== 4\r\n            || metadataEntry.value !== 6) {\r\n\r\n            this.errors.push({\r\n              target: target.constructor.name,\r\n              property: metadataEntry.property,\r\n              type: decorators.DecoratorTypes.IP_ADDRESS,\r\n              message: 'Could not validate property ' + metadataEntry.property + ' of ' + target.constructor.name + '. ' + metadataEntry.value + ' is no valid Internet Protocol version.',\r\n              value: target[metadataEntry.property],\r\n              comparison: metadataEntry.value\r\n            });\r\n          }\r\n          else {\r\n            if (!validator.isIP(target[metadataEntry.property], metadataEntry.value)) {\r\n\r\n              this.errors.push({\r\n                target: target.constructor.name,\r\n                property: metadataEntry.property,\r\n                type: decorators.DecoratorTypes.IP_ADDRESS,\r\n                message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is no valid IP' + metadataEntry.value + ' address.',\r\n                value: target[metadataEntry.property],\r\n                comparison: metadataEntry.value\r\n              });\r\n            }\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  } // method end (validateString)\r\n\r\n  /**\r\n   * Validates metadata of properties of type number.\r\n   * @param target Object\r\n   * @param metadataEntry.property string\r\n   * @param metadataEntry any\r\n   */\r\n  protected validateNumber(target: Object, metadataEntry: any) {\r\n    switch (metadataEntry.type) {\r\n\r\n      case decorators.DecoratorTypes.MAX_VALUE:\r\n        if (typeof target[metadataEntry.property] !== 'number') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'Number', metadataEntry.value));\r\n        }\r\n        else if (!validator.isFloat(target[metadataEntry.property].toString(), { max: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: metadataEntry.type,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is bigger than ' + metadataEntry.value + '.',\r\n            value: target[metadataEntry.property],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MIN_VALUE:\r\n        if (typeof target[metadataEntry.property] !== 'number') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'Number', metadataEntry.value));\r\n        }\r\n        else if (!validator.isFloat(target[metadataEntry.property].toString(), { min: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: metadataEntry.type,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is smaller than ' + metadataEntry.value + '.',\r\n            value: target[metadataEntry.property],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MULTIPLE_OF:\r\n        if (typeof target[metadataEntry.property] !== 'number') {\r\n          this.errors.push(this.validationTypeConflict(target, metadataEntry.property, metadataEntry.type, 'Number', metadataEntry.value));\r\n        }\r\n        else if (!validator.isDivisibleBy(target[metadataEntry.property].toString(), metadataEntry.value)) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: metadataEntry.property,\r\n            type: metadataEntry.type,\r\n            message: 'Property ' + metadataEntry.property + ' of ' + target.constructor.name + ' is no multiple of ' + metadataEntry.value + '.',\r\n            value: target[metadataEntry.property],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n    }\r\n  } // method end (validateNumber)\r\n\r\n  protected validationTypeConflict(target: any, property: string, type: string, conflict: string, comparison?: any): IValidatorError {\r\n    return {\r\n      target: target.constructor.name,\r\n      property: property,\r\n      type: type,\r\n      message: 'Property ' + property + ' of ' + target.constructor.name + ' is not of type ' + conflict + '.',\r\n      value: target[property],\r\n      comparison: comparison\r\n    };\r\n  } // method end (validationTypeConflict)\r\n\r\n} // class end (Validator)\r\n"],"sourceRoot":"/source/"}