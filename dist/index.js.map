{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\nimport 'reflect-metadata';\nimport { IValidatorOptions } from './interfaces/IValidatorOptions';\nimport { IValidatorError } from './interfaces/IValidatorError';\nimport * as decorators from './decorators';\nimport validator = require('validator');\n\nexport class Validator {\n\n  private errors: IValidatorError[] = [];\n  private nestedMode: boolean = false;\n\n  /**\n   * Validate via decorator predefined metadata of properties of objects and nested objects. Returns error messages via array of the IValidatorError interface.\n   * @param target Object\n   * @param validatorOptions IValidatorOptions optional\n   * @return IValidatorError[]\n   */\n  public validate(target: Object, validatorOptions?: IValidatorOptions): IValidatorError[] {\n\n    for (let propertyName in target) {\n      // Check object for property.\n      if (!target.hasOwnProperty(propertyName)) {\n        continue;\n      }\n      // Get system- and validator-predefined Metadata, then check for sufficient results.\n      let types = Reflect.getMetadata('design:type', target, propertyName);\n      let metadata = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n      if (types !== undefined\n        && metadata !== undefined) {\n        // Loop over sets of Metadata, execute requested validation.\n        for (let metadataEntry of metadata) {\n          if (metadataEntry.type === decorators.DecoratorTypes.NESTED\n            && typeof target[propertyName] === 'object') {\n            this.nestedMode = true;\n            this.validate(target[propertyName], validatorOptions);\n          }\n          // Execute requested type dependant validation.\n          else {\n            this.nestedMode = false;\n            switch (types.name) {\n\n              case 'String':\n                this.validateString(target, propertyName, metadataEntry);\n                break;\n\n              case 'Number':\n                this.validateNumber(target, propertyName, metadataEntry);\n                break;\n\n              case 'Boolean':\n                break;\n            }\n            // Execute requested type independant validation.\n            switch (metadataEntry.type) {\n\n              case decorators.DecoratorTypes.IS_TYPED:\n                switch (types.name) {\n\n                  case 'Object':\n                    if (metadataEntry.value\n                      && target[propertyName] !== null) {\n\n                      if (!(target[propertyName] instanceof metadataEntry.value\n                        || metadataEntry.value.name.toString().toLowerCase() === typeof target[propertyName])) {\n\n                        this.errors.push({\n                          target: target.constructor.name,\n                          property: propertyName,\n                          type: decorators.DecoratorTypes.IS_TYPED,\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type ' + metadataEntry.value.name + '.',\n                          value: target[propertyName]\n                        });\n                      }\n                    }\n                    break;\n\n                  case 'String':\n                    if (target[propertyName] !== null) {\n\n                      if ((metadataEntry.value\n                        && !(target[propertyName] instanceof metadataEntry.value))\n                        || (!metadataEntry.value\n                          && (typeof target[propertyName] !== 'string'))) {\n\n                        this.errors.push({\n                          target: target.constructor.name,\n                          property: propertyName,\n                          type: decorators.DecoratorTypes.IS_TYPED,\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a string.',\n                          value: target[propertyName]\n                        });\n                      }\n                    }\n                    break;\n\n                  case 'Number':\n                    if (target[propertyName] !== null) {\n\n                      if ((metadataEntry.value\n                        && !(target[propertyName] instanceof metadataEntry.value))\n                        || (!metadataEntry.value\n                          && (typeof target[propertyName] !== 'number'))) {\n\n                        this.errors.push({\n                          target: target.constructor.name,\n                          property: propertyName,\n                          type: decorators.DecoratorTypes.IS_TYPED,\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a number.',\n                          value: target[propertyName]\n                        });\n                      }\n                    }\n                    break;\n\n                  case 'Boolean':\n                    if (target[propertyName] !== null) {\n\n                      if ((metadataEntry.value\n                        && !(target[propertyName] instanceof metadataEntry.value))\n                        || (!metadataEntry.value\n                          && (typeof target[propertyName] !== 'boolean'))) {\n\n                        this.errors.push({\n                          target: target.constructor.name,\n                          property: propertyName,\n                          type: decorators.DecoratorTypes.IS_TYPED,\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type Boolean.',\n                          value: target[propertyName]\n                        });\n                      }\n                    }\n                    break;\n\n                  default:\n                    if (target[propertyName]) {\n\n                      if ((metadataEntry.value\n                        && !(target[propertyName] instanceof metadataEntry.value))\n                        || (!metadataEntry.value\n                          && !(target[propertyName] instanceof types))) {\n\n                        this.errors.push({\n                          target: target.constructor.name,\n                          property: propertyName,\n                          type: decorators.DecoratorTypes.IS_TYPED,\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type ' + types.name + '.',\n                          value: target[propertyName]\n                        });\n                      }\n                    }\n                    break;\n                }\n                break;\n\n              case decorators.DecoratorTypes.IS_INT:\n                if (!validator.isInt(target[propertyName].toString())\n                  || typeof target[propertyName] !== 'number') {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName,\n                    type: decorators.DecoratorTypes.IS_INT,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type Integer.',\n                    value: target[propertyName]\n                  });\n                }\n                break;\n              case decorators.DecoratorTypes.IS_FLOAT:\n                if (!validator.isFloat(target[propertyName].toString())\n                  || typeof target[propertyName] !== 'number') {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName,\n                    type: decorators.DecoratorTypes.IS_FLOAT,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type Float.',\n                    value: target[propertyName]\n                  });\n                }\n                break;\n              case decorators.DecoratorTypes.IS_DECIMAL:\n                if (!validator.isDecimal(target[propertyName].toString())\n                  || typeof target[propertyName] !== 'number') {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName,\n                    type: decorators.DecoratorTypes.IS_DECIMAL,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type Decimal.',\n                    value: target[propertyName]\n                  });\n                }\n                break;\n              case decorators.DecoratorTypes.NOT_EMPTY:\n                if (target[propertyName] === ''\n                  || target[propertyName] === null\n                  || target[propertyName] === undefined) {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName,\n                    type: decorators.DecoratorTypes.NOT_EMPTY,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is empty.',\n                    value: target[propertyName]\n                  });\n                }\n                break;\n              case decorators.DecoratorTypes.IS_EMPTY:\n                if (target[propertyName] !== ''\n                  && target[propertyName] !== null\n                  && target[propertyName] !== undefined) {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName,\n                    type: decorators.DecoratorTypes.IS_EMPTY,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not empty.',\n                    value: target[propertyName]\n                  });\n                }\n                break;\n              case decorators.DecoratorTypes.DEFINED:\n                if (target[propertyName] === undefined) {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName,\n                    type: decorators.DecoratorTypes.DEFINED,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not defined.',\n                    value: target[propertyName]\n                  });\n                }\n                break;\n              case decorators.DecoratorTypes.IN_ARRAY:\n                if (!validator.isIn(target[propertyName].toString(), metadataEntry.value)) {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName,\n                    type: decorators.DecoratorTypes.IN_ARRAY,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' not found in relevant array.',\n                    value: target[propertyName],\n                    comparison: metadataEntry.value\n                  });\n                }\n                break;\n              case decorators.DecoratorTypes.NOT_IN_ARRAY:\n                if (validator.isIn(target[propertyName].toString(), metadataEntry.value)) {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName,\n                    type: decorators.DecoratorTypes.NOT_IN_ARRAY,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' found in array of disallowed values.',\n                    value: target[propertyName],\n                    comparison: metadataEntry.value\n                  });\n                }\n                break;\n              case decorators.DecoratorTypes.EQUALS:\n                if (!validator.equals(target[propertyName].toString(), metadataEntry.value.toString())) {\n\n                  this.errors.push({\n                    target: target.constructor.name,\n                    property: propertyName, type: decorators.DecoratorTypes.EQUALS,\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' not equal to ' + metadataEntry.value.toString() + '.',\n                    value: target[propertyName],\n                    comparison: metadataEntry.value\n                  });\n                }\n                break;\n            }\n          }\n        }\n      }\n\n      else {\n        continue;\n      }\n    }\n    if (!this.nestedMode) {\n      return this.errors;\n    } else {\n      return [];\n    }\n    // method end (validate)\n  }\n\n  /**\n   * Validates metadata of properties of type string.\n   * @param target Object\n   * @param propertyName string\n   * @param metadataEntry any\n   */\n  protected validateString(target: Object, propertyName: string, metadataEntry: any) {\n    switch (metadataEntry.type) {\n\n      case decorators.DecoratorTypes.MAX_LEN:\n        if (!validator.isLength(target[propertyName], { max: metadataEntry.value })) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MAX_LEN,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is longer than ' + metadataEntry.value + ' digit(s).',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MIN_LEN:\n        if (!validator.isLength(target[propertyName], { min: metadataEntry.value })) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MIN_LEN,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is shorter than ' + metadataEntry.value + ' digit(s).',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MAX_BYTE_LEN:\n        if (!validator.isByteLength(target[propertyName], { max: metadataEntry.value })) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MAX_BYTE_LEN,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is longer than ' + metadataEntry.value + ' byte(s).',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MIN_BYTE_LEN:\n        if (!validator.isByteLength(target[propertyName], { min: metadataEntry.value })) {\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MIN_BYTE_LEN,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is shorter than ' + metadataEntry.value + ' byte(s).',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.CONTAINS:\n        if (!validator.contains(target[propertyName], metadataEntry.value)) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.CONTAINS,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' does not contain ' + metadataEntry.value + '.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.ALPHA:\n        if (!validator.isAlpha(target[propertyName].toString().replace(/\\s/g, ''))) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.ALPHA,\n            message: 'Property ' +\n            propertyName + ' of ' +\n            target.constructor.name + ' is not exclusively composed of letter characters.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.ALPHA_NUM:\n        if (!validator.isAlphanumeric(target[propertyName].toString().replace(/\\s/g, ''))) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.ALPHA_NUM,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not alphanumeric.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.DATE:\n        if (!validator.isDate(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.DATE,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a date.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.DATE_ISO8601:\n        if (!validator.isISO8601(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.DATE_ISO8601,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a ISO8601 conform date.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.DATE_AFTER:\n        if (!validator.isAfter(target[propertyName], metadataEntry.value)) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.DATE_AFTER,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a date after ' + validator.toDate(metadataEntry.value) + '.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.DATE_BEFORE:\n        if (!validator.isBefore(target[propertyName], metadataEntry.value)) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.DATE_BEFORE, message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a date before ' + validator.toDate(metadataEntry.value) + '.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.UPPERCASE:\n        if (!validator.isUppercase(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.UPPERCASE,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not uppercase.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.LOWERCASE:\n        if (!validator.isLowercase(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.LOWERCASE,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not lowercase.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      // case decorators.DecoratorTypes.MOBILE_PHONE_NUMBER:\n      //   if (!validator.isMobilePhone(target[propertyName], metadataEntry.value)) {\n      //\n      //     this.errors.push({\n      //       target: target.constructor.name,\n      //       property: propertyName,\n      //       type: decorators.DecoratorTypes.MOBILE_PHONE_NUMBER,\n      //       message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no mobile phone number.',\n      //       value: target[propertyName],\n      //       comparison: metadataEntry.value\n      //     });\n      //   }\n      //   break;\n      case decorators.DecoratorTypes.HEXADECIMAL:\n        if (!validator.isHexadecimal(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.HEXADECIMAL,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no hexadecimal number.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.EMAIL:\n        if (!validator.isEmail(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.EMAIL,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no valid email address.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.HEX_COLOR:\n        if (!validator.isHexColor(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.HEX_COLOR,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no hexadecimal color.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MAC_ADDRESS:\n        if (!validator.isMACAddress(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MAC_ADDRESS,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no MAC address.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MONGO_ID:\n        if (!validator.isMongoId(target[propertyName])) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MONGO_ID,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no MongoDB ObjectID.',\n            value: target[propertyName]\n          });\n        }\n        break;\n      // case decorators.DecoratorTypes.URL:\n      //   if (!validator.isURL(target[propertyName])) {\n      //\n      //     this.errors.push({\n      //       target: target.constructor.name,\n      //       property: propertyName,\n      //       type: decorators.DecoratorTypes.URL,\n      //       message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no URL.',\n      //       value: target[propertyName]\n      //     });\n      //   }\n      //   break;\n      case decorators.DecoratorTypes.IP_ADDRESS:\n        if (metadataEntry.value === null\n          || metadataEntry.value === undefined) {\n\n          if (!validator.isIP(target[propertyName], 4)\n            && !validator.isIP(target[propertyName], 6)) {\n\n            this.errors.push({\n              target: target.constructor.name,\n              property: propertyName,\n              type: decorators.DecoratorTypes.IP_ADDRESS,\n              message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no valid IP address.',\n              value: target[propertyName]\n            });\n          }\n        }\n        else if (metadataEntry.value !== 4\n          || metadataEntry.value !== 6) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.IP_ADDRESS,\n            message: 'Could not validate property ' + propertyName + ' of ' + target.constructor.name + '. ' + metadataEntry.value + ' is no valid Internet Protocol version.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        else {\n          if (!validator.isIP(target[propertyName], metadataEntry.value)) {\n\n            this.errors.push({\n              target: target.constructor.name,\n              property: propertyName,\n              type: decorators.DecoratorTypes.IP_ADDRESS,\n              message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no valid IP' + metadataEntry.value + ' address.',\n              value: target[propertyName],\n              comparison: metadataEntry.value\n            });\n          }\n        }\n        break;\n    }\n    // method end (validateString)\n  }\n\n  /**\n   * Validates metadata of properties of type numbers.\n   * @param target Object\n   * @param propertyName string\n   * @param metadataEntry any\n   */\n  protected validateNumber(target: Object, propertyName: string, metadataEntry: any) {\n    switch (metadataEntry.type) {\n\n      case decorators.DecoratorTypes.MAX_LEN:\n        if (!validator.isLength(target[propertyName].toString(), { max: metadataEntry.value })) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MAX_LEN,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is longer than ' + metadataEntry.value + ' digit(s).',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MIN_LEN:\n        if (!validator.isLength(target[propertyName].toString(), { min: metadataEntry.value })) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MIN_LEN,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is shorter than ' + metadataEntry.value + ' digit(s).',\n            value: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MAX_VALUE:\n        if (!validator.isFloat(target[propertyName].toString(), { max: metadataEntry.value })) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MAX_VALUE,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is bigger than ' + metadataEntry.value + '.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MIN_VALUE:\n        if (!validator.isFloat(target[propertyName].toString(), { min: metadataEntry.value })) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MIN_VALUE,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is smaller than ' + metadataEntry.value + '.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.CONTAINS:\n        if (!validator.contains(target[propertyName].toString(), metadataEntry.value.toString())) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.CONTAINS,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' does not contain ' + metadataEntry.value + '.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n      case decorators.DecoratorTypes.MULTIPLE_OF:\n        if (!validator.isDivisibleBy(target[propertyName].toString(), metadataEntry.value)) {\n\n          this.errors.push({\n            target: target.constructor.name,\n            property: propertyName,\n            type: decorators.DecoratorTypes.MULTIPLE_OF,\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no multiple of ' + metadataEntry.value + '.',\n            value: target[propertyName],\n            comparison: metadataEntry.value\n          });\n        }\n        break;\n    }\n    // method end (validateNumber)\n  }\n  // class end (Validator)\n}\n"],"sourceRoot":"/source/"}