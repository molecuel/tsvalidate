{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,QAAO,kBAAkB,CAAC,CAAA;AAE1B,MAAY,UAAU,WAAM,cAAc,CAAC,CAAA;AAC3C,MAAO,SAAS,WAAW,WAAW,CAAC,CAAC;AAExC;IAAA;QAEU,WAAM,GAAa,EAAE,CAAC;IA4LhC,CAAC;IA1LQ,QAAQ,CAAC,MAAc,EAAE,gBAAoC;QAElE,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,MAAM,CAAC,CAAC,CAAC;YAEhC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACzC,QAAQ,CAAC;YACX,CAAC;YAED,IAAI,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YACrE,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,uBAAuB,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YAClF,EAAE,CAAC,CAAC,QAAQ,KAAK,SAAS;mBACrB,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBAEzB,GAAG,CAAC,CAAC,IAAI,aAAa,IAAI,QAAQ,CAAC,CAAC,CAAC;oBACnC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;wBACnB,KAAK,QAAQ;4BACX,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;4BACzD,KAAK,CAAC;wBACR,KAAK,QAAQ;4BACX,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;4BACzD,KAAK,CAAC;wBACR,KAAK,SAAS;4BACZ,KAAK,CAAC;oBACV,CAAC;oBAED,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC3B,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;4BACtC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,gBAAgB,CAAC,CAAC;4BACtG,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;4BACpC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,0BAA0B,CAAC,CAAC;4BAChH,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;4BACtC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,gBAAgB,CAAC,CAAC;4BACtG,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,MAAM;4BACnC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;gCACtD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,0BAA0B,CAAC,CAAC;4BAChH,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BACrC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;gCACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,wBAAwB,CAAC,CAAC;4BAC9G,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,UAAU;4BACvC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;gCAC1D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,0BAA0B,CAAC,CAAC;4BAChH,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;4BACtC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE;mCAC1B,MAAM,CAAC,YAAY,CAAC,KAAK,IAAI;mCAC7B,MAAM,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gCACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,YAAY,CAAC,CAAC;4BAClG,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BACrC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE;mCAC1B,MAAM,CAAC,YAAY,CAAC,KAAK,IAAI;mCAC7B,MAAM,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gCACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,gBAAgB,CAAC,CAAC;4BACtG,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;4BACpC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,IAAI;mCAC5B,MAAM,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gCACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,kBAAkB,CAAC,CAAC;4BACxG,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BACrC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAC1E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,+BAA+B,CAAC,CAAC;4BACrH,CAAC;4BACD,KAAK,CAAC;wBACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;4BACrC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCAC7E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,iBAAiB,GAAG,aAAa,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;4BACnI,CAAC;4BACD,KAAK,CAAC;oBACV,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC;QACT,CAAC;IACH,CAAC;IAEO,cAAc,CAAC,MAAc,EAAE,YAAoB,EAAE,aAAkB;QAC7E,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3B,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;gBACpC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC5E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,eAAe,CAAC,CAAC;gBACrG,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;gBACpC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC5E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,gBAAgB,CAAC,CAAC;gBACtG,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;gBACrC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACnE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oBAAoB,GAAG,aAAa,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;gBACtI,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,KAAK;gBAClC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oDAAoD,CAAC,CAAC;gBAC1I,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,uBAAuB,CAAC,CAAC;gBAC7G,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,IAAI;gBACjC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,iBAAiB,CAAC,CAAC;gBACvG,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,YAAY;gBACzC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,iCAAiC,CAAC,CAAC;gBACvH,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,UAAU;gBACvC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;oBAClE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,uBAAuB,GAAG,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;gBAC3J,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,WAAW;gBACxC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;oBACnE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,wBAAwB,GAAG,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;gBAC5J,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;gBAC1G,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,SAAS;gBACtC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;gBAC1G,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,mBAAmB;gBAChD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,6BAA6B,CAAC,CAAC;gBACnH,CAAC;gBACD,KAAK,CAAC;QACV,CAAC;IACH,CAAC;IAEO,cAAc,CAAC,MAAc,EAAE,YAAoB,EAAE,aAAkB;QAC7E,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3B,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;gBACpC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBACvF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,eAAe,CAAC,CAAC;gBACrG,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,OAAO;gBACpC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBACvF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,gBAAgB,CAAC,CAAC;gBACtG,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,QAAQ;gBACrC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC9E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,oBAAoB,GAAG,aAAa,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;gBACtI,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,UAAU,CAAC,cAAc,CAAC,mBAAmB;gBAChD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACnF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,6BAA6B,CAAC,CAAC;gBACnH,CAAC;gBACD,KAAK,CAAC;QACV,CAAC;IACH,CAAC;AACH,CAAC;AA9LY,iBAAS,YA8LrB,CAAA","file":"index.js","sourcesContent":["'use strict';\nimport 'reflect-metadata';\nimport { IValidatorOptions } from './interfaces/IValidatorOptions';\nimport * as decorators from './decorators';\nimport validator = require('validator');\n\nexport class Validator {\n\n  private errors: string[] = [];\n\n  public validate(target: Object, validatorOptions?: IValidatorOptions) {\n\n    for (let propertyName in target) {\n      // Check object for property.\n      if (!target.hasOwnProperty(propertyName)) {\n        continue;\n      }\n      // Get system- and validator-predefined Metadata, then check for sufficient results.\n      let types = Reflect.getMetadata('design:type', target, propertyName);\n      let metadata = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n      if (metadata !== undefined\n        && types !== undefined) {\n        // Loop over sets of Metadata, execute requested type dependant validation.\n        for (let metadataEntry of metadata) {\n          switch (types.name) {\n            case 'String':\n              this.validateString(target, propertyName, metadataEntry);\n              break;\n            case 'Number':\n              this.validateNumber(target, propertyName, metadataEntry);\n              break;\n            case 'Boolean':\n              break;\n          }\n          // Execute requested type independant validation.\n          switch (metadataEntry.type) {\n            case decorators.DecoratorTypes.IS_STRING:\n              if (types.name !== 'String') {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is no string.');\n              }\n              break;\n            case decorators.DecoratorTypes.IS_BOOL:\n              if (types.name !== 'Boolean') {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not of type Boolean.');\n              }\n              break;\n            case decorators.DecoratorTypes.IS_NUMBER:\n              if (types.name !== 'Number') {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is no number.');\n              }\n              break;\n            case decorators.DecoratorTypes.IS_INT:\n              if (!validator.isInt(target[propertyName].toString())) {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not of type Integer.');\n              }\n              break;\n            case decorators.DecoratorTypes.IS_FLOAT:\n              if (!validator.isFloat(target[propertyName].toString())) {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not of type Float.');\n              }\n              break;\n            case decorators.DecoratorTypes.IS_DECIMAL:\n              if (!validator.isDecimal(target[propertyName].toString())) {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not of type Decimal.');\n              }\n              break;\n            case decorators.DecoratorTypes.NOT_EMPTY:\n              if (target[propertyName] === ''\n                || target[propertyName] === null\n                || target[propertyName] === undefined) {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is empty.');\n              }\n              break;\n            case decorators.DecoratorTypes.IS_EMPTY:\n              if (target[propertyName] !== ''\n                && target[propertyName] !== null\n                && target[propertyName] !== undefined) {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not empty.');\n              }\n              break;\n            case decorators.DecoratorTypes.DEFINED:\n              if (target[propertyName] !== null\n                && target[propertyName] !== undefined) {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not defined.');\n              }\n              break;\n            case decorators.DecoratorTypes.IN_ARRAY:\n              if (!validator.isIn(target[propertyName].toString(), metadataEntry.value)) {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' not found in relevant array.');\n              }\n              break;\n            case decorators.DecoratorTypes.MATCHING:\n              if (!validator.matches(target[propertyName].toString(), metadataEntry.value)) {\n                this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' does not match' + metadataEntry.value + '.');\n              }\n              break;\n          }\n        }\n      }\n    }\n    if (this.errors.length > 0) {\n      return this.errors;\n    } else {\n      return;\n    }\n  }\n\n  private validateString(target: Object, propertyName: string, metadataEntry: any) {\n    switch (metadataEntry.type) {\n      case decorators.DecoratorTypes.MAX_LEN:\n        if (!validator.isLength(target[propertyName], { max: metadataEntry.value })) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is too long.');\n        }\n        break;\n      case decorators.DecoratorTypes.MIN_LEN:\n        if (!validator.isLength(target[propertyName], { min: metadataEntry.value })) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is too short.');\n        }\n        break;\n      case decorators.DecoratorTypes.CONTAINS:\n        if (!validator.contains(target[propertyName], metadataEntry.value)) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' does not contain ' + metadataEntry.value + '.');\n        }\n        break;\n      case decorators.DecoratorTypes.ALPHA:\n        if (!validator.isAlpha(target[propertyName])) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not exclusively composed of letter characters.');\n        }\n        break;\n      case decorators.DecoratorTypes.ALPHA_NUM:\n        if (!validator.isAlphanumeric(target[propertyName])) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not alphanumeric.');\n        }\n        break;\n      case decorators.DecoratorTypes.DATE:\n        if (!validator.isDate(target[propertyName])) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not a date.');\n        }\n        break;\n      case decorators.DecoratorTypes.DATE_ISO8601:\n        if (!validator.isISO8601(target[propertyName])) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not a ISO8601 conform date.');\n        }\n        break;\n      case decorators.DecoratorTypes.DATE_AFTER:\n        if (!validator.isAfter(target[propertyName]), metadataEntry.value) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not a date after ' + validator.toDate(metadataEntry.value) + '.');\n        }\n        break;\n      case decorators.DecoratorTypes.DATE_BEFORE:\n        if (!validator.isBefore(target[propertyName]), metadataEntry.value) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not a date before ' + validator.toDate(metadataEntry.value) + '.');\n        }\n        break;\n      case decorators.DecoratorTypes.UPPERCASE:\n        if (!validator.isUppercase(target[propertyName])) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not uppercase.');\n        }\n        break;\n      case decorators.DecoratorTypes.LOWERCASE:\n        if (!validator.isLowercase(target[propertyName])) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is not lowercase.');\n        }\n        break;\n      case decorators.DecoratorTypes.MOBILE_PHONE_NUMBER:\n        if (!validator.isMobilePhone(target[propertyName], metadataEntry.value)) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is no mobile phone number.');\n        }\n        break;\n    }\n  }\n\n  private validateNumber(target: Object, propertyName: string, metadataEntry: any) {\n    switch (metadataEntry.type) {\n      case decorators.DecoratorTypes.MAX_LEN:\n        if (!validator.isLength(target[propertyName].toString(), { max: metadataEntry.value })) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is too long.');\n        }\n        break;\n      case decorators.DecoratorTypes.MIN_LEN:\n        if (!validator.isLength(target[propertyName].toString(), { min: metadataEntry.value })) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is too short.');\n        }\n        break;\n      case decorators.DecoratorTypes.CONTAINS:\n        if (!validator.contains(target[propertyName].toString(), metadataEntry.value)) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' does not contain ' + metadataEntry.value + '.');\n        }\n        break;\n      case decorators.DecoratorTypes.MOBILE_PHONE_NUMBER:\n        if (!validator.isMobilePhone(target[propertyName].toString(), metadataEntry.value)) {\n          this.errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is no mobile phone number.');\n        }\n        break;\n    }\n  }\n}\n"],"sourceRoot":"/source/"}