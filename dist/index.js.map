{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\nimport 'reflect-metadata';\nimport validatorjs = require('validator');\r\n\r\nexport class validatorTypes {\n  static MAX_LEN = 'max_len';\n  static MIN_LEN = 'min_len';\n  static CONTAINS = 'contains';\n  static IS_EMPTY = 'is_empty';\n  static NOT_EMPTY = 'not_empty';\n  static ALPHA_NUM = 'alpha_num';\n}\n\nexport interface ValidatorError {\n  /**\n   * Name of the target class that was validated.\n   */\n  target: string;\n  /**\n   * Target's property on which validation is applied.\n   */\n  property: string;\n  /**\n   * Error's type.\n   */\n  type: string;\n  /**\n   * Error's message.\n   */\n  message: string;\n  /**\n   * Value of that target's property, that didn't pass a validation.\n   */\n  value: any;\n}\n\n/**\n * Options used to pass to validation decorators.\n */\nexport interface ValidatorOptions {\n  /**\n   * Specifies if validated value is an array and each of its item must be validated.\n   */\n  each?: boolean;\n  /**\n   * Error message used to be used on validation fail.\n   * You can use '$value' to use value that was failed by validation.\n   * You can use '$constraint1' and '$constraint2' keys in the message string,\n   * and they will be replaced with constraint values if they exist.\n   * Message can be either string, either a function that returns a string.\n   * Second option allows to use values and custom messages depend of them.\n   */\n  message?: string | ((value?: any, constraint1?: any, constraint2?: any) => string);\n  /**\n   * Validation groups used for this validation.\n   */\n  groups?: string[];\n  /**\n   * Indicates if validation must be performed always, no matter of validation groups used.\n   */\n  always?: boolean;\n}\n\nexport class Validator {\n\n  validate(target: Object, validatorOptions?: ValidatorOptions) {\n    for (let propertyName in target) {\n      if (!target.hasOwnProperty(propertyName)) {\n        continue;\n      }\n      let keys = Reflect.getMetadataKeys(target, propertyName);\n      let validators = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n      let types = Reflect.getMetadata('design:type', target, propertyName);\n      let errors: string[] = [];\n      // console.log(validators + '\\n' + types);\n\n      for (let validator of validators) {\n        switch (validator.type) {\n          case validatorTypes.MAX_LEN:\n            if (target[propertyName].length > validator.value) {\n              errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' too long.');\n            };\n          case validatorTypes.MIN_LEN:\n            if (target[propertyName].length < validator.value) {\n              errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' too short.');\n            };\n          case validatorTypes.CONTAINS:\n            if (!target[propertyName].toString.contains(validator.value)) {\n              errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' too short.');\n            };\n          case validatorTypes.ALPHA_NUM:\n            console.log(target[propertyName]);\n            if (validatorjs.isAlpha(target[propertyName])) {\n              errors.push('Parameter ' + propertyName + ' of ' + target.constructor.name + ' is alphanumeric');\n            };\n        }\n      }\n    }\n  }\n}\n\n\nexport function MaxLen(value, validatorOptions?: ValidatorOptions) {\n  return function(target: Object, propertyName: string) {\n    let validators = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n    if (!validators) {\n      validators = [];\n    }\n    validators.push({ type: 'max_len', value: value, validatorOptions });\n    Reflect.defineMetadata('tsvalidate:validators', validators, target, propertyName);\n  };\n}\n\nexport function MinLen(value, validatorOptions?: ValidatorOptions) {\n  return function(target: Object, propertyName: string) {\n    let validators = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n    if (!validators) {\n      validators = [];\n    }\n    validators.push({ type: 'min_len', value: value, validatorOptions });\n    Reflect.defineMetadata('tsvalidate:validators', validators, target, propertyName);\n  };\n}\n\nexport function Contains(value: string, validatorOptions?: ValidatorOptions) {\n  return function(target: Object, propertyName: string) {\n    let validators = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n    if (!validators) {\n      validators = [];\n    }\n    validators.push({ type: validatorTypes.CONTAINS, value: value, validatorOptions });\n    Reflect.defineMetadata('tsvalidate:validators', validators, target, propertyName);\n  };\n}\n\nexport function IsEmpty(value, validatorOptions?: ValidatorOptions) {\n  return function(target: Object, propertyName: string) {\n    let validators = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n    if (!validators) {\n      validators = [];\n    }\n    validators.push({ type: validatorTypes.IS_EMPTY, value: value, validatorOptions });\n    Reflect.defineMetadata('tsvalidate:validators', validators, target, propertyName);\n  };\n}\n\nexport function IsNotEmpty(value, validatorOptions?: ValidatorOptions) {\n  return function(target: Object, propertyName: string) {\n    let validators = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n    if (!validators) {\n      validators = [];\n    }\n    validators.push({ type: validatorTypes.NOT_EMPTY, value: value, validatorOptions });\n    Reflect.defineMetadata('tsvalidate:validators', validators, target, propertyName);\n  };\n}\n\nexport function AlphaNum(validatorOptions?: ValidatorOptions) {\n  return function(target: Object, propertyName: string) {\n    let validators = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n    if (!validators) {\n      validators = [];\n    }\n    console.log(validatorTypes);\n    validators.push({ type: 'alpha_num', validatorOptions });\n    Reflect.defineMetadata('tsvalidate:validators', validators, target, propertyName);\n  };\n}\n"],"sourceRoot":"/source/"}