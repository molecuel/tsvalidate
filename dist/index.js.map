{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\nimport 'reflect-metadata';\r\nimport { IValidatorOptions } from './interfaces/IValidatorOptions';\r\nimport { IValidatorError } from './interfaces/IValidatorError';\r\nexport * from './interfaces/IValidatorError';\r\nimport * as decorators from './decorators';\r\nexport * from './decorators';\r\nimport validator = require('validator');\r\n\r\nexport class Validator {\r\n\r\n  private errors: IValidatorError[] = [];\r\n  private nestedMode: boolean = false;\r\n\r\n  /**\r\n   * Validate via decorator predefined metadata of properties of objects and nested objects. Returns error messages via array of the IValidatorError interface.\r\n   * @param target Object\r\n   * @param validatorOptions IValidatorOptions optional\r\n   * @return IValidatorError[]\r\n   */\r\n  public validate(target: Object, validatorOptions?: IValidatorOptions): IValidatorError[] {\r\n\r\n    for (let propertyName in target) {\r\n      // Check object for property.\r\n      if (!target.hasOwnProperty(propertyName)) {\r\n        continue;\r\n      }\r\n      // Get system- and validator-predefined Metadata, then check for sufficient results.\r\n      let types = Reflect.getMetadata('design:type', target, propertyName);\r\n      let metadata = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\r\n      if (types !== undefined\r\n        && metadata !== undefined) {\r\n        // Loop over sets of Metadata, execute requested validation.\r\n        for (let metadataEntry of metadata) {\r\n          if (metadataEntry.type === decorators.DecoratorTypes.NESTED\r\n            && typeof target[propertyName] === 'object') {\r\n            this.nestedMode = true;\r\n            this.validate(target[propertyName], validatorOptions);\r\n          }\r\n          // Execute requested type dependant validation.\r\n          else {\r\n            this.nestedMode = false;\r\n            switch (types.name) {\r\n\r\n              case 'String':\r\n                this.validateString(target, propertyName, metadataEntry);\r\n                break;\r\n\r\n              case 'Number':\r\n                this.validateNumber(target, propertyName, metadataEntry);\r\n                break;\r\n\r\n              case 'Boolean':\r\n                break;\r\n            }\r\n            // Execute requested type independant validation.\r\n            switch (metadataEntry.type) {\r\n\r\n              case decorators.DecoratorTypes.IS_TYPED:\r\n                switch (types.name) {\r\n\r\n                  case 'Object':\r\n                    if (metadataEntry.value\r\n                      && target[propertyName] !== null) {\r\n\r\n                      if (!(target[propertyName] instanceof metadataEntry.value\r\n                        || metadataEntry.value.name.toString().toLowerCase() === typeof target[propertyName])) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: propertyName,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type ' + metadataEntry.value.name + '.',\r\n                          value: target[propertyName]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n\r\n                  case 'String':\r\n                    if (target[propertyName] !== null) {\r\n\r\n                      if ((metadataEntry.value\r\n                        && !(target[propertyName] instanceof metadataEntry.value))\r\n                        || (!metadataEntry.value\r\n                          && (typeof target[propertyName] !== 'string'))) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: propertyName,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a string.',\r\n                          value: target[propertyName]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n\r\n                  case 'Number':\r\n                    if (target[propertyName] !== null) {\r\n\r\n                      if ((metadataEntry.value\r\n                        && !(target[propertyName] instanceof metadataEntry.value))\r\n                        || (!metadataEntry.value\r\n                          && (typeof target[propertyName] !== 'number'))) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: propertyName,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a number.',\r\n                          value: target[propertyName]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n\r\n                  case 'Boolean':\r\n                    if (target[propertyName] !== null) {\r\n\r\n                      if ((metadataEntry.value\r\n                        && !(target[propertyName] instanceof metadataEntry.value))\r\n                        || (!metadataEntry.value\r\n                          && (typeof target[propertyName] !== 'boolean'))) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: propertyName,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type Boolean.',\r\n                          value: target[propertyName]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n\r\n                  default:\r\n                    if (target[propertyName]) {\r\n\r\n                      if ((metadataEntry.value\r\n                        && !(target[propertyName] instanceof metadataEntry.value))\r\n                        || (!metadataEntry.value\r\n                          && !(target[propertyName] instanceof types))) {\r\n\r\n                        this.errors.push({\r\n                          target: target.constructor.name,\r\n                          property: propertyName,\r\n                          type: decorators.DecoratorTypes.IS_TYPED,\r\n                          message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type ' + types.name + '.',\r\n                          value: target[propertyName]\r\n                        });\r\n                      }\r\n                    }\r\n                    break;\r\n                }\r\n                break;\r\n\r\n              case decorators.DecoratorTypes.IS_INT:\r\n                if (!validator.isInt(target[propertyName].toString())\r\n                  || typeof target[propertyName] !== 'number') {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName,\r\n                    type: decorators.DecoratorTypes.IS_INT,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type Integer.',\r\n                    value: target[propertyName]\r\n                  });\r\n                }\r\n                break;\r\n              case decorators.DecoratorTypes.IS_FLOAT:\r\n                if (!validator.isFloat(target[propertyName].toString())\r\n                  || typeof target[propertyName] !== 'number') {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName,\r\n                    type: decorators.DecoratorTypes.IS_FLOAT,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type Float.',\r\n                    value: target[propertyName]\r\n                  });\r\n                }\r\n                break;\r\n              case decorators.DecoratorTypes.IS_DECIMAL:\r\n                if (!validator.isDecimal(target[propertyName].toString())\r\n                  || typeof target[propertyName] !== 'number') {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName,\r\n                    type: decorators.DecoratorTypes.IS_DECIMAL,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not of type Decimal.',\r\n                    value: target[propertyName]\r\n                  });\r\n                }\r\n                break;\r\n              case decorators.DecoratorTypes.NOT_EMPTY:\r\n                if (target[propertyName] === ''\r\n                  || target[propertyName] === null\r\n                  || target[propertyName] === undefined) {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName,\r\n                    type: decorators.DecoratorTypes.NOT_EMPTY,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is empty.',\r\n                    value: target[propertyName]\r\n                  });\r\n                }\r\n                break;\r\n              case decorators.DecoratorTypes.IS_EMPTY:\r\n                if (target[propertyName] !== ''\r\n                  && target[propertyName] !== null\r\n                  && target[propertyName] !== undefined) {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName,\r\n                    type: decorators.DecoratorTypes.IS_EMPTY,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not empty.',\r\n                    value: target[propertyName]\r\n                  });\r\n                }\r\n                break;\r\n              case decorators.DecoratorTypes.DEFINED:\r\n                if (target[propertyName] === undefined) {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName,\r\n                    type: decorators.DecoratorTypes.DEFINED,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not defined.',\r\n                    value: target[propertyName]\r\n                  });\r\n                }\r\n                break;\r\n              case decorators.DecoratorTypes.IN_ARRAY:\r\n                if (!validator.isIn(target[propertyName].toString(), metadataEntry.value)) {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName,\r\n                    type: decorators.DecoratorTypes.IN_ARRAY,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' not found in relevant array.',\r\n                    value: target[propertyName],\r\n                    comparison: metadataEntry.value\r\n                  });\r\n                }\r\n                break;\r\n              case decorators.DecoratorTypes.NOT_IN_ARRAY:\r\n                if (validator.isIn(target[propertyName].toString(), metadataEntry.value)) {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName,\r\n                    type: decorators.DecoratorTypes.NOT_IN_ARRAY,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' found in array of disallowed values.',\r\n                    value: target[propertyName],\r\n                    comparison: metadataEntry.value\r\n                  });\r\n                }\r\n                break;\r\n              case decorators.DecoratorTypes.EQUALS:\r\n                if (!validator.equals(target[propertyName].toString(), metadataEntry.value.toString())) {\r\n\r\n                  this.errors.push({\r\n                    target: target.constructor.name,\r\n                    property: propertyName, type: decorators.DecoratorTypes.EQUALS,\r\n                    message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' not equal to ' + metadataEntry.value.toString() + '.',\r\n                    value: target[propertyName],\r\n                    comparison: metadataEntry.value\r\n                  });\r\n                }\r\n                break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      else {\r\n        continue;\r\n      }\r\n    }\r\n    if (!this.nestedMode) {\r\n      return this.errors;\r\n    } else {\r\n      return [];\r\n    }\r\n    // method end (validate)\r\n  }\r\n\r\n  /**\r\n   * Validates metadata of properties of type string.\r\n   * @param target Object\r\n   * @param propertyName string\r\n   * @param metadataEntry any\r\n   */\r\n  protected validateString(target: Object, propertyName: string, metadataEntry: any) {\r\n    switch (metadataEntry.type) {\r\n\r\n      case decorators.DecoratorTypes.MAX_LEN:\r\n        if (!validator.isLength(target[propertyName], { max: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MAX_LEN,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is longer than ' + metadataEntry.value + ' digit(s).',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MIN_LEN:\r\n        if (!validator.isLength(target[propertyName], { min: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MIN_LEN,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is shorter than ' + metadataEntry.value + ' digit(s).',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MAX_BYTE_LEN:\r\n        if (!validator.isByteLength(target[propertyName], { max: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MAX_BYTE_LEN,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is longer than ' + metadataEntry.value + ' byte(s).',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MIN_BYTE_LEN:\r\n        if (!validator.isByteLength(target[propertyName], { min: metadataEntry.value })) {\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MIN_BYTE_LEN,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is shorter than ' + metadataEntry.value + ' byte(s).',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.CONTAINS:\r\n        if (!validator.contains(target[propertyName], metadataEntry.value)) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.CONTAINS,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' does not contain ' + metadataEntry.value + '.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.ALPHA:\r\n        if (!validator.isAlpha(target[propertyName].toString().replace(/\\s/g, ''))) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.ALPHA,\r\n            message: 'Property ' +\r\n            propertyName + ' of ' +\r\n            target.constructor.name + ' is not exclusively composed of letter characters.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.ALPHA_NUM:\r\n        if (!validator.isAlphanumeric(target[propertyName].toString().replace(/\\s/g, ''))) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.ALPHA_NUM,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not alphanumeric.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.DATE:\r\n        if (!validator.isDate(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.DATE,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a date.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.DATE_ISO8601:\r\n        if (!validator.isISO8601(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.DATE_ISO8601,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a ISO8601 conform date.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.DATE_AFTER:\r\n        if (!validator.isAfter(target[propertyName], metadataEntry.value)) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.DATE_AFTER,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a date after ' + validator.toDate(metadataEntry.value) + '.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.DATE_BEFORE:\r\n        if (!validator.isBefore(target[propertyName], metadataEntry.value)) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.DATE_BEFORE, message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not a date before ' + validator.toDate(metadataEntry.value) + '.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.UPPERCASE:\r\n        if (!validator.isUppercase(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.UPPERCASE,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not uppercase.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.LOWERCASE:\r\n        if (!validator.isLowercase(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.LOWERCASE,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is not lowercase.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      // case decorators.DecoratorTypes.MOBILE_PHONE_NUMBER:\r\n      //   if (!validator.isMobilePhone(target[propertyName], metadataEntry.value)) {\r\n      //\r\n      //     this.errors.push({\r\n      //       target: target.constructor.name,\r\n      //       property: propertyName,\r\n      //       type: decorators.DecoratorTypes.MOBILE_PHONE_NUMBER,\r\n      //       message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no mobile phone number.',\r\n      //       value: target[propertyName],\r\n      //       comparison: metadataEntry.value\r\n      //     });\r\n      //   }\r\n      //   break;\r\n      case decorators.DecoratorTypes.HEXADECIMAL:\r\n        if (!validator.isHexadecimal(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.HEXADECIMAL,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no hexadecimal number.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.EMAIL:\r\n        if (!validator.isEmail(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.EMAIL,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no valid email address.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.HEX_COLOR:\r\n        if (!validator.isHexColor(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.HEX_COLOR,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no hexadecimal color.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MAC_ADDRESS:\r\n        if (!validator.isMACAddress(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MAC_ADDRESS,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no MAC address.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MONGO_ID:\r\n        if (!validator.isMongoId(target[propertyName])) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MONGO_ID,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no MongoDB ObjectID.',\r\n            value: target[propertyName]\r\n          });\r\n        }\r\n        break;\r\n      // case decorators.DecoratorTypes.URL:\r\n      //   if (!validator.isURL(target[propertyName])) {\r\n      //\r\n      //     this.errors.push({\r\n      //       target: target.constructor.name,\r\n      //       property: propertyName,\r\n      //       type: decorators.DecoratorTypes.URL,\r\n      //       message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no URL.',\r\n      //       value: target[propertyName]\r\n      //     });\r\n      //   }\r\n      //   break;\r\n      case decorators.DecoratorTypes.IP_ADDRESS:\r\n        if (metadataEntry.value === null\r\n          || metadataEntry.value === undefined) {\r\n\r\n          if (!validator.isIP(target[propertyName], 4)\r\n            && !validator.isIP(target[propertyName], 6)) {\r\n\r\n            this.errors.push({\r\n              target: target.constructor.name,\r\n              property: propertyName,\r\n              type: decorators.DecoratorTypes.IP_ADDRESS,\r\n              message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no valid IP address.',\r\n              value: target[propertyName]\r\n            });\r\n          }\r\n        }\r\n        else if (metadataEntry.value !== 4\r\n          || metadataEntry.value !== 6) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.IP_ADDRESS,\r\n            message: 'Could not validate property ' + propertyName + ' of ' + target.constructor.name + '. ' + metadataEntry.value + ' is no valid Internet Protocol version.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        else {\r\n          if (!validator.isIP(target[propertyName], metadataEntry.value)) {\r\n\r\n            this.errors.push({\r\n              target: target.constructor.name,\r\n              property: propertyName,\r\n              type: decorators.DecoratorTypes.IP_ADDRESS,\r\n              message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no valid IP' + metadataEntry.value + ' address.',\r\n              value: target[propertyName],\r\n              comparison: metadataEntry.value\r\n            });\r\n          }\r\n        }\r\n        break;\r\n    }\r\n    // method end (validateString)\r\n  }\r\n\r\n  /**\r\n   * Validates metadata of properties of type numbers.\r\n   * @param target Object\r\n   * @param propertyName string\r\n   * @param metadataEntry any\r\n   */\r\n  protected validateNumber(target: Object, propertyName: string, metadataEntry: any) {\r\n    switch (metadataEntry.type) {\r\n\r\n      case decorators.DecoratorTypes.MAX_LEN:\r\n        if (!validator.isLength(target[propertyName].toString(), { max: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MAX_LEN,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is longer than ' + metadataEntry.value + ' digit(s).',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MIN_LEN:\r\n        if (!validator.isLength(target[propertyName].toString(), { min: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MIN_LEN,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is shorter than ' + metadataEntry.value + ' digit(s).',\r\n            value: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MAX_VALUE:\r\n        if (!validator.isFloat(target[propertyName].toString(), { max: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MAX_VALUE,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is bigger than ' + metadataEntry.value + '.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MIN_VALUE:\r\n        if (!validator.isFloat(target[propertyName].toString(), { min: metadataEntry.value })) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MIN_VALUE,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is smaller than ' + metadataEntry.value + '.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.CONTAINS:\r\n        if (!validator.contains(target[propertyName].toString(), metadataEntry.value.toString())) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.CONTAINS,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' does not contain ' + metadataEntry.value + '.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n      case decorators.DecoratorTypes.MULTIPLE_OF:\r\n        if (!validator.isDivisibleBy(target[propertyName].toString(), metadataEntry.value)) {\r\n\r\n          this.errors.push({\r\n            target: target.constructor.name,\r\n            property: propertyName,\r\n            type: decorators.DecoratorTypes.MULTIPLE_OF,\r\n            message: 'Property ' + propertyName + ' of ' + target.constructor.name + ' is no multiple of ' + metadataEntry.value + '.',\r\n            value: target[propertyName],\r\n            comparison: metadataEntry.value\r\n          });\r\n        }\r\n        break;\r\n    }\r\n    // method end (validateNumber)\r\n  }\r\n  // class end (Validator)\r\n}\r\n"],"sourceRoot":"/source/"}