{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,QAAO,kBAAkB,CAAC,CAAA;AAK1B,yBAAqB,6BAA6B,CAAC,CAAA;AAGnD;AAOA,CAAC;AANQ,sBAAO,GAAG,SAAS,CAAC;AACpB,sBAAO,GAAG,SAAS,CAAC;AACpB,uBAAQ,GAAG,UAAU,CAAC;AACtB,uBAAQ,GAAG,UAAU,CAAC;AACtB,wBAAS,GAAG,WAAW,CAAC;AACxB,wBAAS,GAAG,WAAW,CAAC;AANpB,sBAAc,iBAO1B,CAAA;AAED;IAIE;QACE,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,CAAC;QACjC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;QAEZ,IAAI,MAAM,GAAW,IAAI,eAAM,EAAE,CAAC;QAClC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAEjC,CAAC;IACM,iBAAiB,CAAC,SAAqB;QAC5C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACtD,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC;IAC/C,CAAC;IACM,QAAQ,CAAC,MAAc,EAAE,gBAAoC;QAClE,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,MAAM,CAAC,CAAC,CAAC;YAChC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACzC,QAAQ,CAAC;YACX,CAAC;YAED,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,uBAAuB,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YAEpF,IAAI,MAAM,GAAa,EAAE,CAAC;YAG1B,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,UAAU,CAAC,CAAC,CAAC;gBACjC,IAAI,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAClE,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACrB,IAAI,WAAW,GAAG,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;oBACzG,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC3B,CAAC;gBACH,CAAC;YACH,CAAC;YACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC;YACT,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AA3CY,iBAAS,YA2CrB,CAAA","file":"index.js","sourcesContent":["'use strict';\nimport 'reflect-metadata';\nimport {IValidatorOptions} from './interfaces/IValidatorOptions';\r\nimport {IValidator} from './interfaces/IValidator';\r\nexport {IValidator} from './interfaces/IValidator';\r\n\r\nimport {MaxLen} from './classes/validators/MaxLen';\r\n\r\n\r\nexport class validatorTypes {\n  static MAX_LEN = 'max_len';\n  static MIN_LEN = 'min_len';\n  static CONTAINS = 'contains';\n  static IS_EMPTY = 'is_empty';\n  static NOT_EMPTY = 'not_empty';\n  static ALPHA_NUM = 'alpha_num';\n}\n\nexport class Validator {\n  private validatorRegistry: Map<string, IValidator>;\n  public d: any;\n\n  constructor() {\n    this.validatorRegistry = new Map;\n    this.d = {};\n\n    let maxlen: MaxLen = new MaxLen();\n    this.registerValidator(maxlen);\n\n  }\n  public registerValidator(validator: IValidator) {\n    this.validatorRegistry.set(validator.name, validator);\n    this.d[validator.name] = validator.decorator;\n  }\n  public validate(target: Object, validatorOptions?: IValidatorOptions) {\n    for (let propertyName in target) {\n      if (!target.hasOwnProperty(propertyName)) {\n        continue;\n      }\n      // let keys = Reflect.getMetadataKeys(target, propertyName);\n      let validators = Reflect.getMetadata('tsvalidate:validators', target, propertyName);\n      // let types = Reflect.getMetadata('design:type', target, propertyName);\n      let errors: string[] = [];\n      // console.log(validators + '\\n' + types);\n\n      for (let validator of validators) {\n        let currentvalidator = this.validatorRegistry.get(validator.type);\n        if (currentvalidator) {\n          let validreturn = currentvalidator.validate(target[propertyName], target, propertyName, validator.value);\n          if (validreturn) {\n            errors.push(validreturn);\n          }\n        }\n      }\n      if (errors.length > 0) {\n        return errors;\n      } else {\n        return;\n      }\n    }\n  }\n}\n"],"sourceRoot":"/source/"}