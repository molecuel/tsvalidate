import { IValidatorOptions } from './interfaces/IValidatorOptions';
export declare class DecoratorTypes {
    static readonly IS_TYPED: string;
    static readonly IS_ARRAY: string;
    static readonly IS_INT: string;
    static readonly IS_FLOAT: string;
    static readonly IS_DECIMAL: string;
    static readonly IS_EMPTY: string;
    static readonly NOT_EMPTY: string;
    static readonly DEFINED: string;
    static readonly EQUALS: string;
    static readonly IN_ARRAY: string;
    static readonly NOT_IN_ARRAY: string;
    static readonly MAX_LEN: string;
    static readonly MIN_LEN: string;
    static readonly CONTAINS: string;
    static readonly MAX_BYTE_LEN: string;
    static readonly MIN_BYTE_LEN: string;
    static readonly DATE_AFTER: string;
    static readonly DATE_BEFORE: string;
    static readonly UPPERCASE: string;
    static readonly LOWERCASE: string;
    static readonly DATE: string;
    static readonly EMAIL: string;
    static readonly ALPHA: string;
    static readonly ALPHA_NUM: string;
    static readonly HEX_COLOR: string;
    static readonly HEXADECIMAL: string;
    static readonly IP_ADDRESS: string;
    static readonly DATE_ISO8601: string;
    static readonly MAC_ADDRESS: string;
    static readonly MONGO_ID: string;
    static readonly MAX_VALUE: string;
    static readonly MIN_VALUE: string;
    static readonly MULTIPLE_OF: string;
    static readonly NESTED: string;
}
export declare function UseMongoCollection(collection: string): (target: Object) => void;
export declare const METADATAKEY: string;
export declare function ValidateType(objectType?: Object | any[], validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsInt(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsFloat(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsDecimal(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function MaxLen(value: number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function MinLen(value: number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function MaxByteLen(value: number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function MinByteLen(value: number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function MaxValue(value: number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function MinValue(value: number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function DateBefore(value: any, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function DateAfter(value: any, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function Equals(value: any, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function Uppercase(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function Lowercase(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function MultipleOf(value: number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function InArray(array: any[], validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function NotInArray(array: any[], validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function Contains(value: string | number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsEmpty(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsNotEmpty(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function Alpha(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function AlphaNumeric(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsDate(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsEmail(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function HexColor(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsIP(version?: number, validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function Hexadecimal(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function ISO8601Date(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsMAC(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function MongoID(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function ValidateNested(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function IsDefined(validatorOptions?: IValidatorOptions): (target: Object, propertyName: string) => void;
export declare function Trim(): (target: Object, propertyName: string) => void;
export declare function ClearValidators(): (target: Object, propertyName: string) => void;
